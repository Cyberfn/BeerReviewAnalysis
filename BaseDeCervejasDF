{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":113429,"sourceType":"datasetVersion","datasetId":58438}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Análise de Avaliações de Cervejas\n\n## Descrição do Projeto\nEste projeto explora uma base de dados com mais de 1,5 milhão de avaliações de cervejas feitas por usuários. As avaliações abordam diversos aspectos sensoriais, como aroma, aparência, sabor e sensação, além de informações detalhadas sobre as cervejarias e os estilos de cerveja. A base é ideal para análises de tendências de consumo, preferências de estilos e insights sobre o comportamento dos consumidores de cervejas.\n\n## Objetivos\n- **Analisar a qualidade das cervejas** com base em diferentes critérios sensoriais.\n- **Identificar tendências** no consumo de cervejas.\n- **Construir um modelo preditivo** para estimar a nota geral da cerveja (`review_overall`) com base nas avaliações sensoriais.\n\n## Estrutura dos Dados\nA base de dados contém as seguintes variáveis:\n\n| Variável                  | Descrição                                         |\n|---------------------------|---------------------------------------------------|\n| **brewery_id**            | Identificador único da cervejaria.                |\n| **brewery_name**          | Nome da cervejaria.                              |\n| **review_time**           | Data e hora da avaliação.                        |\n| **review_overall**        | Nota geral da cerveja (escala de 1 a 5).        |\n| **review_aroma**          | Avaliação do aroma (escala de 1 a 5).           |\n| **review_appearance**     | Avaliação da aparência (escala de 1 a 5).       |\n| **review_profilename**    | Nome de usuário do avaliador.                    |\n| **beer_style**            | Estilo ou tipo de cerveja.                       |\n| **review_palate**         | Avaliação da sensação na boca (escala de 1 a 5).|\n| **review_taste**          | Avaliação do sabor (escala de 1 a 5).           |\n| **beer_name**             | Nome da cerveja.                                 |\n| **beer_abv**              | Teor alcoólico da cerveja (ABV - Alcohol by Volume). |\n| **beer_beerid**           | Identificador único da cerveja.                  |\n\nCom essa estrutura, é possível realizar uma análise detalhada da relação entre os diferentes aspectos sensoriais e as notas atribuídas pelos consumidores, proporcionando insights valiosos sobre a indústria cervejeira.\n\n## Metodologia\n1. **Importação de Bibliotecas**: Utilizamos bibliotecas como `pandas`, `numpy`, `sklearn` e `matplotlib` para manipulação de dados, modelagem e visualização.\n2. **Carregamento dos Dados**: Os dados foram carregados de um arquivo CSV e armazenados em um DataFrame.\n3. **Preparação dos Dados**:\n   - Seleção de características e variável alvo (`review_overall`).\n   - Conversão da coluna `review_time` para o formato datetime (opcional).\n   - Classificação de avaliações em categorias textuais:\n     - Os valores de 1 a 5 foram interpretados da seguinte forma:\n       - `1.0`: \"Muito ruim\"\n       - `1.5`: \"Ruim\"\n       - `2.0`: \"Regular\"\n       - `2.5`: \"Razoável\"\n       - `3.0`: \"Satisfatório\"\n       - `3.5`: \"Agradável\"\n       - `4.0`: \"Muito bom\"\n       - `4.5`: \"Excelente\"\n       - `5.0`: \"Perfeito\"\n4. **Divisão dos Dados**: O conjunto de dados foi dividido em conjuntos de treino e teste (80/20).\n5. **Criação e Treinamento do Modelo**: Um modelo de regressão linear foi criado e treinado para prever a nota geral da cerveja.\n6. **Avaliação do Modelo**: O modelo foi avaliado utilizando as métricas de erro quadrático médio (MSE) e o coeficiente de determinação (R²).\n7. **Previsões**: Foi criada uma função para prever a nota geral com base em entradas sensoriais.\n8. **Visualização dos Resultados**: Um gráfico de dispersão foi gerado para comparar os valores reais e previstos.\n\n## Resultados\nO modelo conseguiu prever a nota geral com uma precisão razoável, proporcionando insights sobre a relação entre as características sensoriais e a avaliação geral da cerveja.\n\n## Conclusão\nEste projeto oferece uma visão abrangente sobre as avaliações de cervejas, permitindo que tanto os consumidores quanto os produtores entendam melhor as preferências e tendências no mercado.\n\n## Autor\n[**Fernando Nonato**](https://github.com/Cyberfn)  \n<a href=\"https://github.com/Cyberfn\"><img src=\"https://github.com/Cyberfn.png\" width=\"150\" height=\"150\" /></a>\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"markdown","source":"# 1 - Importando Bibliotecas Necessárias ","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor  \nfrom sklearn.svm import SVC \nfrom sklearn.neighbors import KNeighborsRegressor  \nfrom sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:04:00.162015Z","iopub.execute_input":"2024-10-07T20:04:00.162629Z","iopub.status.idle":"2024-10-07T20:04:00.170752Z","shell.execute_reply.started":"2024-10-07T20:04:00.162575Z","shell.execute_reply":"2024-10-07T20:04:00.169359Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 2 - Carregando os Dados","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('../input/beerreviews/beer_reviews.csv')\ndf2 = df.copy()","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:04:00.173082Z","iopub.execute_input":"2024-10-07T20:04:00.173514Z","iopub.status.idle":"2024-10-07T20:04:06.245366Z","shell.execute_reply.started":"2024-10-07T20:04:00.173471Z","shell.execute_reply":"2024-10-07T20:04:06.243396Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 3 - Visualização de Dados das Avaliações de Cervejas","metadata":{}},{"cell_type":"code","source":"# Criando Histograma das Avaliações\nplt.figure(figsize=(10, 6))\nplt.hist(df2['review_overall'], bins=30, color='blue', alpha=0.7, edgecolor='black')\nplt.title('Distribuição das Notas Gerais das Cervejas')\nplt.xlabel('Nota Geral (review_overall)')\nplt.ylabel('Frequência')\nplt.grid(axis='y', alpha=0.75)\nplt.show()\n\n# Gráfico de dispersão - Relação entre teor alcoólico (ABV) e nota geral\nplt.figure(figsize=(10,6))\nsns.scatterplot(x='beer_abv', y='review_overall', data=df2, alpha=0.5)\nplt.title('Relação entre Teor Alcoólico (ABV) e Nota Geral')\nplt.xlabel('Teor Alcoólico (%)')\nplt.ylabel('Nota Geral')\nplt.show()\n\n# Gráfico de barras - Média das avaliações por estilo de cerveja\nplt.figure(figsize=(12,8))\navg_review_by_style = df2.groupby('beer_style')['review_overall'].mean().sort_values(ascending=False).head(10)\navg_review_by_style.plot(kind='barh', color='skyblue')\nplt.title('Média das Notas Gerais por Estilo de Cerveja (Top 10)')\nplt.xlabel('Nota Média')\nplt.ylabel('Estilo de Cerveja')\nplt.show()\n\n# Heatmap - Correlação entre as avaliações\ncorr = df2[['review_aroma', 'review_appearance', 'review_palate', 'review_taste', 'review_overall']].corr()\nplt.figure(figsize=(8,6))\nsns.heatmap(corr, annot=True, cmap='coolwarm')\nplt.title('Correlação entre as Avaliações')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:04:06.247633Z","iopub.execute_input":"2024-10-07T20:04:06.248029Z","iopub.status.idle":"2024-10-07T20:04:11.605477Z","shell.execute_reply.started":"2024-10-07T20:04:06.247989Z","shell.execute_reply":"2024-10-07T20:04:11.604221Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 4 - Selecionando Características e Alvo","metadata":{}},{"cell_type":"code","source":"features = df2[['review_taste']]\ntarget = df2['review_overall']","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:04:11.608345Z","iopub.execute_input":"2024-10-07T20:04:11.608744Z","iopub.status.idle":"2024-10-07T20:04:11.617368Z","shell.execute_reply.started":"2024-10-07T20:04:11.608704Z","shell.execute_reply":"2024-10-07T20:04:11.616169Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 5 - Convertendo para datetime","metadata":{}},{"cell_type":"code","source":"df2['review_time'] = pd.to_datetime(df2['review_time'], unit='s')","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:04:11.618977Z","iopub.execute_input":"2024-10-07T20:04:11.619365Z","iopub.status.idle":"2024-10-07T20:04:11.797721Z","shell.execute_reply.started":"2024-10-07T20:04:11.619325Z","shell.execute_reply":"2024-10-07T20:04:11.796397Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 6 - Dividindo os Dados","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:04:11.799574Z","iopub.execute_input":"2024-10-07T20:04:11.800222Z","iopub.status.idle":"2024-10-07T20:04:11.947795Z","shell.execute_reply.started":"2024-10-07T20:04:11.800145Z","shell.execute_reply":"2024-10-07T20:04:11.946648Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 7- Modelos de Regressão","metadata":{}},{"cell_type":"markdown","source":"## 7.1 - Regressão Linear","metadata":{}},{"cell_type":"code","source":"# Instanciando o modelo de Regressão Linear\nlinear_model = LinearRegression()\n\n# Treinando o modelo com os dados de treino\nlinear_model.fit(X_train, y_train)\n\n# Fazendo previsões nos dados de teste\nlinear_predictions = linear_model.predict(X_test)\n\n# Calculando o erro quadrático médio (MSE) entre os valores reais e previstos\nlinear_mse = mean_squared_error(y_test, linear_predictions)\n\n# Calculando o coeficiente de determinação (R²) para avaliar o ajuste do modelo\nlinear_r2 = r2_score(y_test, linear_predictions)\n\n# Calculando a acurácia da regressão linear\n# A acurácia é definida como a proporção de previsões cuja diferença em relação ao valor real é menor que 10%\nlinear_accuracy = np.mean(np.abs((y_test - linear_predictions) / y_test) < 0.1)  # Acurácia entre 0 e 1\n\n# Exibindo as métricas de desempenho: MSE, R² e acurácia\nprint(f'Regressão Linear - MSE: {linear_mse:.2f}, R²: {linear_r2:.2f}, Acurácia: {linear_accuracy:.2f}')","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:04:11.949515Z","iopub.execute_input":"2024-10-07T20:04:11.950376Z","iopub.status.idle":"2024-10-07T20:04:12.089017Z","shell.execute_reply.started":"2024-10-07T20:04:11.950316Z","shell.execute_reply":"2024-10-07T20:04:12.087865Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 7.2 - Regressão Logística","metadata":{}},{"cell_type":"code","source":"# Convertendo a variável alvo para binária\n# Classifica como 1 se o valor for maior que 3.0 e 0 caso contrário\ntarget_binary = (target > 3.0).astype(int)\n\n# Dividindo os dados em conjuntos de treino e teste\n# Utiliza 80% dos dados para treino e 20% para teste\nX_train_logistic, X_test_logistic, y_train_logistic, y_test_logistic = train_test_split(features, target_binary, test_size=0.2, random_state=42)\n\n# Instanciando o modelo de Regressão Logística\nlogistic_model = LogisticRegression()\n\n# Treinando o modelo com os dados de treino\nlogistic_model.fit(X_train_logistic, y_train_logistic)\n\n# Fazendo previsões nos dados de teste\nlogistic_predictions = logistic_model.predict(X_test_logistic)\n\n# Calculando o erro quadrático médio (MSE) das previsões\n# MSE é usado apenas como referência aqui, mesmo que não seja a métrica mais apropriada para classificação\nlogistic_mse = mean_squared_error(y_test_logistic, logistic_predictions)\n\n# Calculando a acurácia, que é a proporção de previsões corretas\nlogistic_accuracy = accuracy_score(y_test_logistic, logistic_predictions)\n\n# Exibindo as métricas de desempenho: MSE e acurácia\nprint(f'Regressão Logística - MSE: {logistic_mse:.2f}, Acurácia: {logistic_accuracy:.2f}')","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:04:12.090524Z","iopub.execute_input":"2024-10-07T20:04:12.091061Z","iopub.status.idle":"2024-10-07T20:04:14.393151Z","shell.execute_reply.started":"2024-10-07T20:04:12.091009Z","shell.execute_reply":"2024-10-07T20:04:14.391912Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 7.3 - Árvore de Decisão","metadata":{}},{"cell_type":"code","source":"# Instanciando o modelo de Regressão com Árvore de Decisão\ndecision_tree_model = DecisionTreeRegressor(random_state=42)\n\n# Treinando o modelo de Árvore de Decisão com os dados de treino\ndecision_tree_model.fit(X_train, y_train)\n\n# Fazendo previsões nos dados de teste\ndecision_tree_predictions = decision_tree_model.predict(X_test)\n\n# Calculando o erro quadrático médio (MSE) entre os valores reais e previstos\ndecision_tree_mse = mean_squared_error(y_test, decision_tree_predictions)\n\n# Calculando o coeficiente de determinação (R²) para avaliar o ajuste do modelo\ndecision_tree_r2 = r2_score(y_test, decision_tree_predictions)\n\n# Calculando a acurácia da Árvore de Decisão\n# A acurácia é a proporção de previsões cuja diferença em relação ao valor real é menor que 10%\ndecision_tree_accuracy = np.mean(np.abs((y_test - decision_tree_predictions) / y_test) < 0.1)\n\n# Exibindo as métricas de desempenho: MSE, R² e acurácia\nprint(f'Árvore de Decisão - MSE: {decision_tree_mse:.2f}, R²: {decision_tree_r2:.2f}, Acurácia: {decision_tree_accuracy:.2f}')","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:04:14.402429Z","iopub.execute_input":"2024-10-07T20:04:14.406356Z","iopub.status.idle":"2024-10-07T20:04:14.583136Z","shell.execute_reply.started":"2024-10-07T20:04:14.406274Z","shell.execute_reply":"2024-10-07T20:04:14.581962Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 7.4 - Random Forest","metadata":{}},{"cell_type":"code","source":"# Instanciando o modelo de Regressão com Random Forest\nrandom_forest_model = RandomForestRegressor(random_state=42)\n\n# Treinando o modelo Random Forest com os dados de treino\nrandom_forest_model.fit(X_train, y_train)\n\n# Fazendo previsões nos dados de teste\nrandom_forest_predictions = random_forest_model.predict(X_test)\n\n# Calculando o erro quadrático médio (MSE) entre os valores reais e previstos\nrandom_forest_mse = mean_squared_error(y_test, random_forest_predictions)\n\n# Calculando o coeficiente de determinação (R²) para avaliar o ajuste do modelo\nrandom_forest_r2 = r2_score(y_test, random_forest_predictions)\n\n# Calculando a acurácia do modelo Random Forest\n# A acurácia é a proporção de previsões cuja diferença em relação ao valor real é menor que 10%\nrandom_forest_accuracy = np.mean(np.abs((y_test - random_forest_predictions) / y_test) < 0.1)\n\n# Exibindo as métricas de desempenho: MSE, R² e acurácia\nprint(f'Random Forest - MSE: {random_forest_mse:.2f}, R²: {random_forest_r2:.2f}, Acurácia: {random_forest_accuracy:.2f}')","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:04:14.584539Z","iopub.execute_input":"2024-10-07T20:04:14.584954Z","iopub.status.idle":"2024-10-07T20:04:32.093153Z","shell.execute_reply.started":"2024-10-07T20:04:14.584915Z","shell.execute_reply":"2024-10-07T20:04:32.091935Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 7.5 - K-Nearest Neighbors(KNN)","metadata":{}},{"cell_type":"code","source":"# Instanciando o modelo de Regressão K-Nearest Neighbors (KNN)\n# Definindo o número de vizinhos a considerar nas previsões (n_neighbors=5)\nknn_model = KNeighborsRegressor(n_neighbors=5)\n\n# Treinando o modelo KNN com os dados de treino\nknn_model.fit(X_train, y_train)\n\n# Fazendo previsões nos dados de teste\nknn_predictions = knn_model.predict(X_test)\n\n# Calculando o erro quadrático médio (MSE) entre os valores reais e previstos\nknn_mse = mean_squared_error(y_test, knn_predictions)\n\n# Calculando o coeficiente de determinação (R²) para avaliar o ajuste do modelo\nknn_r2 = r2_score(y_test, knn_predictions)\n\n# Calculando a acurácia do modelo KNN\n# A acurácia é a proporção de previsões cuja diferença em relação ao valor real é menor que 10%\nknn_accuracy = np.mean(np.abs((y_test - knn_predictions) / y_test) < 0.1)\n\n# Exibindo as métricas de desempenho: MSE, R² e acurácia\nprint(f'K-Nearest Neighbors - MSE: {knn_mse:.2f}, R²: {knn_r2:.2f}, Acurácia: {knn_accuracy:.2f}')","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:04:32.094581Z","iopub.execute_input":"2024-10-07T20:04:32.095019Z","iopub.status.idle":"2024-10-07T20:20:48.232234Z","shell.execute_reply.started":"2024-10-07T20:04:32.094980Z","shell.execute_reply":"2024-10-07T20:20:48.230588Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 7.6 - Support Vector Classifier (SVC)","metadata":{}},{"cell_type":"code","source":"# Definindo o modelo de Support Vector Classifier (SVC)\n# svc_model = SVC()\n\n# Treinando o modelo SVC com os dados de treino binários\n# O modelo é ajustado utilizando os dados de entrada (X_train_logistic) e a variável alvo binária (y_train_logistic)\n# svc_model.fit(X_train_logistic, y_train_logistic)\n\n# Fazendo previsões nos dados de teste\n# svc_predictions = svc_model.predict(X_test_logistic)\n\n# Calculando a acurácia para o modelo SVC\n# A acurácia é a proporção de previsões corretas em relação aos valores reais da variável alvo binária\n# svc_accuracy = accuracy_score(y_test_logistic, svc_predictions)\n\n# Exibindo a acurácia do modelo SVC\n# print(f'Support Vector Classifier - Acurácia: {svc_accuracy:.2f}')","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:20:48.234070Z","iopub.execute_input":"2024-10-07T20:20:48.234464Z","iopub.status.idle":"2024-10-07T20:20:48.240293Z","shell.execute_reply.started":"2024-10-07T20:20:48.234425Z","shell.execute_reply":"2024-10-07T20:20:48.238902Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 8 - Previsões","metadata":{}},{"cell_type":"code","source":"def predict_overall_review_linear(taste):\n    input_data = pd.DataFrame({\n        'review_taste': [taste]\n    })\n    prediction = linear_model.predict(input_data)\n    return prediction[0]  # Retornando o valor previsto sem arredondar\n\ndef predict_overall_review_logistic(review_taste):\n    review_taste_df = pd.DataFrame({'review_taste': [review_taste]})\n    prediction = logistic_model.predict(review_taste_df)\n    return \"Boa Avaliação\" if prediction[0] == 1 else \"Má Avaliação\"\n\ndef predict_overall_review_decision_tree(taste):\n    input_data = pd.DataFrame({\n        'review_taste': [taste]\n    })\n    prediction = decision_tree_model.predict(input_data)\n    return prediction[0]  # Retornando o valor previsto sem arredondar\n\ndef predict_overall_review_random_forest(taste):\n    input_data = pd.DataFrame({\n        'review_taste': [taste]\n    })\n    prediction = random_forest_model.predict(input_data)\n    return prediction[0]  # Retornando o valor previsto sem arredondar\n\ndef predict_overall_review_knn(taste):\n    input_data = pd.DataFrame({\n        'review_taste': [taste]\n    })\n    prediction = knn_model.predict(input_data)\n    return \"Boa Avaliação\" if prediction[0] == 1 else \"Má Avaliação\"\n\n# def predict_overall_review_svc(taste):\n#     review_taste_df = pd.DataFrame({\n#         'review_taste': [review_taste]\n#     })\n#     prediction = svc_model.predict(input_data)\n#     return \"Boa Avaliação\" if prediction[0] == 1 else \"Má Avaliação\"\n\n# ------------------- Previsões com valores arredondados---------------------\n\n# def predict_overall_review_linear(taste):\n#     input_data = pd.DataFrame({\n#         'review_taste': [taste]\n#     })\n#     prediction = linear_model.predict(input_data)\n#     return round(prediction[0])  # Retornando o valor previsto arredondado\n\n# def predict_overall_review_logistic(review_taste):\n#     review_taste_df = pd.DataFrame({'review_taste': [review_taste]})\n#     prediction = logistic_model.predict(review_taste_df)\n#     return \"Boa Avaliação\" if prediction[0] == 1 else \"Má Avaliação\"\n\n# def predict_overall_review_decision_tree(taste):\n#     input_data = pd.DataFrame({\n#         'review_taste': [taste]\n#     })\n#     prediction = decision_tree_model.predict(input_data)\n#     return round(prediction[0])  # Retornando o valor previsto arredondado\n\n# def predict_overall_review_random_forest(taste):\n#     input_data = pd.DataFrame({\n#         'review_taste': [taste]\n#     })\n#     prediction = random_forest_model.predict(input_data)\n#     return round(prediction[0])  # Retornando o valor previsto arredondado\n\n# def predict_overall_review_knn(taste):\n#     input_data = pd.DataFrame({\n#         'review_taste': [taste]\n#     })\n#     prediction = knn_model.predict(input_data)\n#     return \"Boa Avaliação\" if prediction[0] == 1 else \"Má Avaliação\"\n#\n# def predict_overall_review_svc(taste):\n#     review_taste_df = pd.DataFrame({\n#         'review_taste': [review_taste]\n#     })\n#     prediction = svc_model.predict(input_data)\n#     return \"Boa Avaliação\" if prediction[0] == 1 else \"Má Avaliação\"\n","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:20:48.242000Z","iopub.execute_input":"2024-10-07T20:20:48.242455Z","iopub.status.idle":"2024-10-07T20:20:48.259427Z","shell.execute_reply.started":"2024-10-07T20:20:48.242412Z","shell.execute_reply":"2024-10-07T20:20:48.257654Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 9 - Calculando a média do sabor (review_taste)","metadata":{}},{"cell_type":"code","source":"taste_mean = df2['review_taste'].mean()\nprint(f\"\\n Média do sabor (review_taste): {taste_mean:.1f} \\n\")","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:20:48.261575Z","iopub.execute_input":"2024-10-07T20:20:48.262273Z","iopub.status.idle":"2024-10-07T20:20:48.285941Z","shell.execute_reply.started":"2024-10-07T20:20:48.262208Z","shell.execute_reply":"2024-10-07T20:20:48.284763Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 10 - Exemplo de predições usando a media do sabor ","metadata":{}},{"cell_type":"code","source":"# ---------------------------- Previsões com Regressão Linear -------------------\npredicted_overall_linear = predict_overall_review_linear(taste_mean)\nprint(f\"Regressão Linear -> Nota Geral Prevista: {predicted_overall_linear:.1f}\")\n\n# ---------------------------- Previsões com Regressão Logística ----------------\npredicted_class_logistic = predict_overall_review_logistic(taste_mean)\nprint(f\"Regressão Logística -> Classificação Prevista: {predicted_class_logistic}\")\n\n# ---------------------------- Previsões com Árvore de Decisão -------------------\npredicted_overall_tree = predict_overall_review_decision_tree(taste_mean)\nprint(f\"Árvore de Decisão -> Nota Geral Prevista: {predicted_overall_tree:.1f}\")\n\n# ---------------------------- Previsões com Random Forest -----------------------\npredicted_overall_random_forest = predict_overall_review_random_forest(taste_mean)\nprint(f\"Random Forest -> Nota Geral Prevista: {predicted_overall_random_forest:.1f}\")\n\n# ---------------------------- Previsões com KNN ---------------------------------\npredicted_class_knn = predict_overall_review_knn(taste_mean)\nprint(f\"KNN -> Classificação Prevista: {predicted_class_knn}\")\n\n#---------------------------- Previsões com SVC ---------------------------------\n# predict_overall_svc = predict_overall_review_svc(taste_mean)\n# print(f\"SVC -> Classificação Prevista: {predict_overall_svc}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:20:48.287343Z","iopub.execute_input":"2024-10-07T20:20:48.287742Z","iopub.status.idle":"2024-10-07T20:20:48.320172Z","shell.execute_reply.started":"2024-10-07T20:20:48.287699Z","shell.execute_reply":"2024-10-07T20:20:48.318918Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 11 - Plotando matriz de confusão para o modelo de Regressão Logística","metadata":{}},{"cell_type":"code","source":"def plot_confusion_matrix(y_true, y_pred, title='Matriz de Confusão'):\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(8, 6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n    plt.title(title)\n    plt.xlabel('Predito')\n    plt.ylabel('Verdadeiro')\n    plt.show()\n    \nplot_confusion_matrix(y_test_logistic, logistic_predictions, title='Matriz de Confusão - Regressão Logística')","metadata":{"execution":{"iopub.status.busy":"2024-10-07T20:25:09.154710Z","iopub.execute_input":"2024-10-07T20:25:09.155215Z","iopub.status.idle":"2024-10-07T20:25:09.485909Z","shell.execute_reply.started":"2024-10-07T20:25:09.155172Z","shell.execute_reply":"2024-10-07T20:25:09.484630Z"},"trusted":true},"execution_count":null,"outputs":[]}]}